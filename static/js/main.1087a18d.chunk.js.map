{"version":3,"sources":["Card.js","backend.js","reducers.js","Image.js","Avatar.js","PlayerPanel.js","Quips.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["CardComponent","card","Card","Error","value","suit","suitSymbol","symbols","className","cardValue","length","cardDisplay","this","name","suits","values","quants","Ace","Jack","Queen","King","Spades","Diamonds","Clubs","Hearts","hands","characters","url","Player","position","character","imgUrl","wallet","hand","Hand","isUser","communityCards","undefined","pocket","availableCards","sortedCards","sortThese","iterations","iterator","forEach","x","evaluate","sort","rankHands","bestIteration","shift","cards","cardSort","a","b","compare","suitCompare","indexOf","list","i","j","version","slice","splice","push","User","dealPocket","gameState","deck","unshuffled","Deck","shuffle","createDeck","state","pockets","players","map","pop","dealTurnOrRiver","turnOrRiverString","holder","community","rankExtractedHands","playerA","playerB","handA","handB","handComparison","cardComparison","washFiveTimes","cut","riffle","box","original","clean","randomIndex","Math","floor","random","wash","range","randSplit","split","firstHalf","secondHalf","riffler","otherHalf","half","probability","temp","max","randLength","target","Array","SWF","straightWheelFlush","multi","tupler","isWheel","isFlush","every","flush","ruler","straight","isStraight","wheel","index","arr","confirmTuple","first","count","filter","pair","unshift","rev","reverse","last","lastIndex","abs","threeOrTwo","bounds","firstIndex","three","mark","item","pair1","pair2","gameplayReducer","action","buttonSetter","payload","type","numOfPlayers","indexOfUser","fetchCharacter","playerOrUser","y","getPlayers","playerList","user","pocketState","flopState","flop","dealFlop","turnState","riverState","evaluatedState","turn","river","bestHand","roundRank","evaluateGame","roundState","winner","records","console","log","nextRound","Image","userClass","xs","style","backgroundImage","Avatar","props","imageProp","Col","Row","PlayerPanel","Avatars","Container","padding","Quips","phrase","process","content","userObject","find","card1","card2","winningHand","Community","renderableCards","Game","useReducer","reducer","dispatch","useState","buttonState","setButtonState","dispatchAction","Button","onClick","replace","App","background","top","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1087a18d.chunk.js","sourcesContent":["import './Card.css';\nimport {symbols} from './backend';\n\nfunction cardDisplay({value,suit}) {\n  let suitSymbol = symbols[suit];\n  let className = `card card-${suit}`;\n  let cardValue = (value.length < 3) ? value : value[0];\n  return {suitSymbol,cardValue,className};\n}\n\nexport function CardComponent({card}) {\n  if (!(card instanceof Card)) throw new Error('not passed a Card object');\n\n  const {suitSymbol, cardValue, className} = cardDisplay(card);\n\n  return (\n    <div \n      className={className} \n      // onClick={()=>console.log(suitSymbol,cardValue)}\n    >\n      {suitSymbol}<br/>\n      {cardValue}\n    </div>\n  )\n}\n\nexport class Card {\n  constructor(value,suit) {\n    this.value = value;\n    this.suit  = suit;\n    this.name = `${value} of ${suit}`;\n  }\n}\n\n\n\n","import { Card } from \"./Card\";\n\nconst suits = [\"Spades\", \"Diamonds\", \"Clubs\", \"Hearts\"];\nconst values = [\n  \"Ace\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"10\",\n  \"Jack\",\n  \"Queen\",\n  \"King\",\n];\nconst quants = {\n  Ace: 13,\n  2: 1,\n  3: 2,\n  4: 3,\n  5: 4,\n  6: 5,\n  7: 6,\n  8: 7,\n  9: 8,\n  10: 9,\n  Jack: 10,\n  Queen: 11,\n  King: 12,\n};\nexport const symbols = {\n  Spades: `\\u2660`,\n  Diamonds: `\\u2666`,\n  Clubs: `\\u2663`,\n  Hearts: `\\u2665`,\n};\nconst hands = [\n  \"straight flush\",\n  \"wheel flush\",\n  \"four of a kind\",\n  \"full house\",\n  \"flush\",\n  \"straight\",\n  \"three of a kind\",\n  \"two pair\",\n  \"one pair\",\n  \"high card\",\n];\n\nexport const characters = [\n  {\n    name: \"Alex Trebek\",\n    url: \"/images/alexTrebek.jpg\",\n  },\n  {\n    name: 'Buddy \"The Elf\"',\n    url: \"/images/buddyTheElf.jpg\",\n  },\n  {\n    name: \"Brennan Huff\",\n    url: \"/images/brennanHuff.jpg\",\n  },\n  {\n    name: \"Chazz Michael Michaels\",\n    url: \"/images/chazzMichaelMichaels.jpg\",\n  },\n  {\n    name: \"Chad Smith\",\n    url: \"/images/chadSmith.jpg\",\n  },\n  {\n    name: \"Detective Allen Gamble\",\n    url: \"/images/detectiveAllenGamble.jpeg\",\n  },\n  {\n    name: 'Frank \"The Tank\" Richard',\n    url: \"/images/frankTheTank.jpg\",\n  },\n  {\n    name: \"Gator\",\n    url: \"/images/gator.jpg\",\n  },\n  {\n    name: \"Harold Crick\",\n    url: \"/images/haroldCrick.jpg\",\n  },\n  {\n    name: \"Jackie Moon\",\n    url: \"/images/jackieMoon.jpg\",\n  },\n  {\n    name: \"Jacobim Mugatu\",\n    url: \"/images/jacobimMugatu.jpg\",\n  },\n  {\n    name: \"Janet Reno\",\n    url: \"/images/janetReno.jpg\",\n  },\n  {\n    name: \"Lars Erickssong\",\n    url: \"/images/larsErickssong.jpg\",\n  },\n  {\n    name: \"Mustafa\",\n    url: \"/images/mustafa.jpg\",\n  },\n  {\n    name: \"Ricky Bobby\",\n    url: \"/images/rickyBobby.jpg\",\n  },\n  {\n    name: \"Ron Burgundy\",\n    url: \"/images/ronBurgundy.jpeg\",\n  },\n];\n\nclass Player {\n  constructor(position, character) {\n    this.name = character.name;\n    this.imgUrl = character.url;\n    this.wallet = 5000;\n    this.hand = new Hand();\n    this.position = position;\n    this.isUser = false;\n  }\n\n  bestHand(communityCards) {\n    if (this.hand.pocket === undefined) throw new Error(\"Player not dealt\");\n\n    const pocket = this.hand.pocket;\n    const availableCards = [...pocket, ...communityCards];\n    const sortedCards = this.sortThese(availableCards);\n    const iterations = this.iterator(sortedCards);\n    iterations.forEach((x) => x.evaluate());\n    iterations.sort(rankHands);\n    const bestIteration = iterations.shift();\n\n    this.hand = { ...bestIteration, pocket };\n    this.hand.pocket = pocket;\n  }\n\n  sortThese(cards) {\n    //Sorts High to Low\n    const sortedCards = cards.sort(this.cardSort);\n\n    return sortedCards;\n  }\n\n  cardSort(a, b) {\n    const compare = quants[b.value] - quants[a.value];\n    const suitCompare = suits.indexOf(b.suit) - suits.indexOf(a.suit);\n\n    if (compare) return compare;\n\n    return suitCompare;\n  }\n\n  iterator(availableCards) {\n    let list = [];\n\n    for (let i = 0; i < availableCards.length; i++) {\n      for (let j = 0; j < availableCards.length; j++) {\n        if (i >= j) {\n          continue;\n        }\n        let version = availableCards.slice();\n        version.splice(j, 1);\n        version.splice(i, 1);\n\n        list.push(new Hand(version));\n      }\n    }\n\n    return list;\n  }\n}\n\nexport class User extends Player {\n  constructor(position, character) {\n    super(position, character);\n    this.isUser = true;\n  }\n}\n\nexport function getPlayers(numOfPlayers = 5) {\n  let players = [];\n  const indexOfUser = Math.floor(Math.random() * numOfPlayers);\n\n  const fetchCharacter = () => {\n    let index = Math.floor(Math.random() * characters.length);\n    return characters[index];\n  };\n\n  const playerOrUser = (index, character) => {\n    var Type;\n    index === indexOfUser ? (Type = User) : (Type = Player);\n\n    return new Type(index, character);\n  };\n\n  for (let i = 0; i < numOfPlayers; i++) {\n    let target;\n    while (!target) {\n      let x = fetchCharacter();\n      if (players.every((y) => y.name !== x.name)) {\n        target = playerOrUser(i, x);\n      }\n    }\n    players.push(target);\n  }\n\n  return [players, players[indexOfUser].name];\n}\n\nexport function dealPocket(gameState) {\n  const deck = createDeck();\n  const state = { ...gameState };\n\n  const pockets = state.players.map((x) => []);\n\n  for (let i = 0; i < 2; i++) {\n    pockets.forEach((x) => x.push(deck.pop()));\n  }\n\n  state.players.forEach((x, i) => {\n    x.hand.pocket = pockets[i];\n  });\n\n  return { ...state, deck };\n}\n\nexport function dealFlop(gameState) {\n  const state = { ...gameState };\n  const deck = [...state.deck];\n  const flop = [];\n  for (let i = 0; i < 3; i++) {\n    flop.push(deck.pop());\n  }\n\n  return { ...state, deck, community: { flop } };\n}\n\nexport function dealTurnOrRiver(gameState, turnOrRiverString) {\n  const state = { ...gameState };\n  const deck = [...state.deck];\n  const holder = [deck.pop()];\n  const community = { ...state.community, [turnOrRiverString]: holder };\n\n  return { ...state, deck, community };\n}\n\nexport function evaluateGame(gameState) {\n  const state = { ...gameState };\n  const { flop, turn, river } = state.community;\n  const community = [...flop, ...turn, ...river];\n  // evaluation is buggy always evaluating to high card\n  state.players.forEach((x) => x.bestHand(community));\n  const playerList = [...state.players];\n  const ranking = playerList.sort(rankExtractedHands);\n  const roundRank = ranking.map((x) => {\n    return {\n      name: x.name,\n      cards: x.hand[0].map((x) => x.name),\n      hand: x.hand.hand,\n    };\n  });\n  return { ...state, roundRank };\n}\n\nexport function nextRound(gameState) {\n  const state = { ...gameState };\n  const winner = state.roundRank[0];\n  state.records\n    ? (state.records = [...state.records, winner])\n    : (state.records = [winner]);\n  const propsForDeletion = [\"deck\", \"community\", \"roundRank\"];\n  propsForDeletion.forEach((x) => {\n    delete state[x];\n  });\n  state.players.forEach((x) => {\n    x.hand = new Hand();\n  });\n  console.log(state);\n  return state;\n}\nfunction rankExtractedHands(playerA, playerB) {\n  return rankHands(playerA.hand, playerB.hand);\n}\n\nfunction rankHands(handA, handB) {\n  const handComparison = hands.indexOf(handA.hand) - hands.indexOf(handB.hand);\n\n  if (handComparison !== 0) return handComparison;\n\n  let cardComparison = 0;\n  let i = 0;\n\n  while (i < 4 && cardComparison === 0) {\n    cardComparison = quants[handB[0][i].value] - quants[handA[0][i].value];\n    i++;\n  }\n\n  return cardComparison;\n}\n\nfunction createDeck() {\n  const unshuffled = [];\n\n  for (let i = 0; i < suits.length; i++) {\n    for (let j = 0; j < values.length; j++) {\n      unshuffled.push(new Card(values[j], suits[i]));\n    }\n  }\n  const unshuffledDeck = new Deck(...unshuffled);\n\n  return unshuffledDeck.shuffle();\n}\n\nfunction randNumInRange(range) {\n  return Math.floor(Math.random() * range);\n}\n\nexport class Deck extends Array {\n  shuffle() {\n    this.washFiveTimes().cut().riffle().box().washFiveTimes().cut().riffle();\n\n    return this;\n  }\n\n  wash() {\n    const original = [];\n    const clean = [];\n    while (this.length > 0) {\n      original.push(this.pop());\n    }\n    while (original.length > 0) {\n      let randomIndex = Math.floor(Math.random() * original.length);\n      clean.push(original.splice(randomIndex, 1)[0]);\n    }\n    while (clean.length > 0) {\n      this.push(clean.pop());\n    }\n    return this;\n  }\n\n  washFiveTimes() {\n    for (let i = 0; i < 5; i++) {\n      this.wash();\n    }\n\n    return this;\n  }\n\n  cut() {\n    const randSplit = this.length / 2 - 2 + randNumInRange(5);\n\n    for (let i = 0; i < randSplit; i++) {\n      this.push(this.shift());\n    }\n    if (this.length > 52 || this.length < 52)\n      throw new Error(`cut ${this.length}`);\n\n    return this;\n  }\n\n  //Empties deck array into two halves with split(), they are poured back\n  //into the deck with varying degrees of slop. Returns 'this'\n  riffle() {\n    let [firstHalf, secondHalf] = this.split();\n\n    while (this.length < 52) {\n      this.riffler(firstHalf);\n      this.riffler(secondHalf);\n    }\n\n    if (this.length > 52 || this.length < 52)\n      throw new Error(`riffle ${this.length}`);\n\n    return this;\n  }\n\n  //deck divided out into two new arrays and returned in an array container\n  split() {\n    let randSplit = 24 + Math.floor(Math.random() * 5);\n    let otherHalf = [];\n\n    for (let i = 0; i < randSplit; i++) {\n      otherHalf.push(this.shift());\n    }\n\n    let clean = [];\n    while (this.length > 0) {\n      clean.push(this.pop());\n    }\n\n    return [otherHalf, clean];\n  }\n\n  riffler(half) {\n    if (half.length > 0) {\n      this.push(half.pop());\n      const probability = Math.random();\n\n      if (probability > 0.9 && half.length > 1) {\n        this.push(half.pop());\n        this.push(half.pop());\n      } else if (probability > 0.75 && half.length > 0) {\n        this.push(half.pop());\n      }\n    }\n  }\n\n  // Performs box shuffle. Returns 'this'\n  box() {\n    let deck = this;\n    let temp = [];\n\n    while (deck.length > 0) {\n      const max = deck.length;\n      let randLength = Math.floor(Math.random() * 7) + 10;\n\n      if (max < randLength) randLength = max;\n\n      let target = deck.length - randLength;\n\n      for (let i = 0; i < randLength; i++) {\n        temp.push(deck.splice(target, 1)[0]);\n      }\n    }\n\n    while (temp.length > 0) deck.push(temp.shift());\n    if (this.length > 52 || this.length < 52)\n      throw new Error(`box ${this.length}`);\n    return this;\n  }\n}\n\nclass Hand extends Array {\n  //Evaluates sorted hand and formats appropriately\n  evaluate() {\n    const SWF = this.straightWheelFlush();\n\n    if (SWF) {\n      this.hand = SWF;\n      return;\n    }\n\n    const multi = this.tupler();\n\n    if (multi) {\n      this.hand = multi;\n      return;\n    }\n\n    throw new Error(`Evaluator failed: ${this}`);\n  }\n\n  //Evaluates straight/wheel/flush and outputs result/formats hand\n  straightWheelFlush() {\n    const hand = this[0];\n    const isFlush = hand.every(this.flush);\n    const ruler = hand.map(this.straight);\n    const isStraight = ruler.every((x) => x);\n    let isWheel;\n\n    isStraight ? (isWheel = false) : (isWheel = this.wheel(ruler));\n\n    if (isFlush) {\n      if (isStraight) return \"straight flush\";\n      if (isWheel) return \"wheel flush\";\n\n      return \"flush\";\n    }\n\n    if (isStraight) return \"straight\";\n    if (isWheel) return \"wheel\";\n\n    return false;\n  }\n\n  //checks that the next array item is of the same suit\n  flush(x, index, arr) {\n    const bounds = arr.length - 2;\n\n    if (index <= bounds) {\n      return x.suit === arr[index + 1].suit;\n    }\n\n    return true;\n  }\n\n  //Evaluates for our definition of straight for '.every()' of an array\n  straight(x, index, arr) {\n    const bounds = arr.length - 2; //index of next to last value\n\n    if (index > bounds) {\n      return true;\n    }\n\n    const a = quants[x.value];\n    const b = arr[index + 1];\n    const c = quants[b.value];\n\n    return a === c + 1;\n  }\n\n  // Returns boolean if hand is a wheel and reorders hand if true\n  wheel(ruler) {\n    let isWheel;\n    const hand = this[0];\n    const possible = hand[0].value === \"A\" && hand[1].value === \"5\";\n\n    if (possible) {\n      ruler.shift();\n      isWheel = ruler.every((x) => x);\n\n      if (isWheel) {\n        hand.push(hand.shift());\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  //returns high card, pair, three of a kind, full house, or error. Also formats hand appropriately\n  tupler() {\n    const hand = this[0];\n    const temp = hand.map(this.confirmTuple);\n    temp.pop();\n    const first = temp.indexOf(true);\n\n    if (first < 0) return \"high card\";\n\n    let count = temp.filter((x) => x === true).length;\n\n    if (count === 1) {\n      const pair = hand.splice(first, 2);\n      hand.unshift(pair[1]);\n      hand.unshift(pair[0]);\n\n      return \"one pair\";\n    }\n\n    const rev = temp.slice();\n    rev.reverse();\n    const last = rev.indexOf(true);\n    const lastIndex = Math.abs(last - 3);\n\n    if (count === 3) {\n      if (temp[0] && temp[3]) {\n        if (temp[2]) {\n          hand.push(hand.shift());\n          hand.push(hand.shift());\n        }\n        return \"full house\";\n      }\n\n      if (temp[3]) {\n        hand.push(hand.shift());\n      }\n\n      return \"four of a kind\";\n    }\n\n    if (count === 2) return this.threeOrTwo(temp, first, lastIndex);\n\n    return \"Error!\";\n  }\n\n  //evaluates for tuples\n  confirmTuple(x, index, arr) {\n    const bounds = arr.length - 1;\n    const target = arr[index + 1];\n\n    if (index < bounds) return x.value === target.value;\n\n    return false;\n  }\n\n  //returns three or 2 pair\n  threeOrTwo(temp, firstIndex, lastIndex) {\n    let hand = this[0];\n\n    if (this.three(temp)) {\n      const mark = temp.indexOf(true);\n      if (mark === 2) {\n        hand.push(hand.shift());\n        hand.push(hand.shift());\n      } else if (mark === 1) {\n        const item = hand.shift();\n        hand.splice(3, 0, item);\n      }\n      return \"three of a kind\";\n    }\n\n    const pair1 = hand.splice(firstIndex, 2);\n    const pair2 = hand.splice(lastIndex - 2, 2);\n    hand.unshift(pair2[1]);\n    hand.unshift(pair2[0]);\n    hand.unshift(pair1[1]);\n    hand.unshift(pair1[0]);\n\n    return \"two pair\";\n  }\n\n  //evaluates three of a kind from map of pair locations in array\n  three(map) {\n    const index = map.indexOf(true);\n    if (map[index] === map[index + 1]) {\n      return \"three of a kind\";\n    }\n\n    return null;\n  }\n\n  // transfer(donatingArray,thisHand) {\n  //   while (this)\n  // }\n}\n\n// class Deck extends Array {\n//   constructor() {\n//     this.order = this.freshDeck();\n//     this.isShuffled = false;\n//     this.isDealt = false;\n//   }\n\n//   //Returns a newly generated deck\n//   freshDeck() {\n//     let deck = [];\n\n//     for (let i = 0; i < suits.length; i++) {\n//       for (let j = 0; j < values.length; j++) {\n//         deck.push(new Card(values[j],suits[i]));\n//       }\n//     }\n\n//     return deck;\n//   }\n\n//   myShuffle() {\n//     const deck = new Shuffle(this.order);\n//     deck.shuffle();\n//     this.order = deck.deck;\n//     this.isShuffled = true;\n//   }\n// }\n\n// //object for a poker game. Game has players, rounds,\n// class Poker {\n//   constructor(user = 'User', table = 5) {\n//       this.round = [new Round(table)];\n//       this.deck = this.round[0].deck;\n//       this.table = this.players(user, table);\n//       this.tableOrder = this.table.slice();\n//       this.blind = 25;\n//       this.step = 0;\n//   }\n\n//   players(user, count) {\n//       let table = [];\n//       let player1 = Math.floor(Math.random() * count);\n\n//       while (player1 >= count) {\n//           player1--;\n//       }\n\n//       this.userIndex = player1;\n\n//       for (let i = 0; i < count; i++) {\n//           if (i === player1) {\n//               table.push(new User(i, user));\n//           }\n//           else {\n//               table.push(new Player(i));\n//           }\n//       }\n\n//       return table;\n//   }\n\n//   shuffle() {\n//       this.deck.myShuffle();\n\n//       while (this.deck.order.length > 52) {\n//           console.log('shuffle is busted still...');\n//           this.deck.order.splice(this.deck.order.indexOf(x=> (x === undefined)),1);\n//       }\n\n//       return this;\n//   }\n\n//   deal() {\n//       const count = this.tableOrder.length;\n//       this.betting(this.blind);\n\n//       if (this.deck.isShuffled) {\n//          this.dealing(count);\n//       }\n//       else {\n//           console.log('...Still need to shuffle');\n//       }\n//       return this;\n//   }\n\n//   dealing(count) {\n//       while (this.tableOrder[0].hand.cards.length < 2) {\n//           this.dealingLoop(count);\n//       }\n\n//       this.deck.isDealt = true;\n//   }\n\n//   dealingLoop(count) {\n//       for (let i = 0; i < count ;i++) {\n//           const player = this.tableOrder[i];\n//           let current = this.deck.order.pop();\n\n//           while (!current) {\n//               current = this.deck.order.pop();\n//           }\n\n//           player.hand.cards.push(current);\n//           player.hand.pocket.push(current);\n//       }\n//   }\n\n//   sort() {\n//       if (this.deck.isDealt) {\n//           this.tableOrder.forEach((x)=>x.hand.sort());\n//       }\n//       else {\n//           console.log('...Still need to deal');\n//       }\n\n//       return this;\n//   }\n\n//   evaluate() {\n//       this.tableOrder.forEach((x)=>x.hand.evaluate());\n\n//       return this;\n//   }\n\n//   evaluation(x) {\n//       let copy = x.hand.cards.slice();\n//       let community = this.round[this.round.length - 1].community.slice();\n\n//       while (community.length) {\n//           copy.push(community.pop());\n//       }\n\n//       const variations = this.iterator(copy);\n\n//       const hands = [];\n//       while (hands.length < variations.length) {\n//           hands.push(new Hand());\n//       }\n//       hands.forEach((x,i) => {\n//           x.cards = variations[i];\n//       });\n\n//       hands.forEach(x => x.sort());\n//       hands.forEach(x => x.evaluate());\n//       hands.sort(this.innerCheck);\n\n//       x.hand.cards = hands[0].cards;\n//       x.hand.hand = hands[0].hand;\n//   }\n\n//   iterator(fullHand) {\n//       let list = [];\n\n//       for (let i = 0; i < fullHand.length; i++) {\n//           for (let j = 0; j < fullHand.length; j++) {\n//               if (i >= j) {\n//                   continue;\n//               }\n//               let version = fullHand.slice();\n//               version.splice(j, 1);\n//               version.splice(i, 1);\n//               list.push(version);\n//           }\n//       }\n\n//       return list;\n//   }\n\n//   innerCheck(a,b) {\n//       const rank = hands.indexOf(a.hand) - hands.indexOf(b.hand);\n//       let compare = 0;\n//       let i = 0;\n\n//       if (rank) {\n//           return rank;\n//       }\n\n//       while (i < 4 && compare === 0) {\n//           compare = quants[b.cards[i].value] - quants[a.cards[i].value];\n//           i++;\n//       }\n\n//       return compare;\n//   }\n\n//   rank() {\n//       let ranking = this.tableOrder.slice();\n\n//       ranking.sort(this.compare);\n//       this.roundWinner(ranking[0].name);\n\n//       return this.table;\n//   }\n\n//   compare(a,b) {\n//       const rank = hands.indexOf(a.hand.hand) - hands.indexOf(b.hand.hand);\n//       if (rank) {\n//           return rank;\n//       }\n\n//       let compare = 0;\n//       let i = 0;\n\n//       while (i < 4 && compare === 0) {\n//           compare = quants[b.hand.cards[i].value] - quants[a.hand.cards[i].value];\n//           i++;\n//       }\n\n//       return compare;\n//   }\n\n//   roundWinner(name) {\n//       const winner = this.table.find(x => x.name === name);\n//       const user = this.table[this.userIndex];\n//       const currentRound = this.round[this.round.length - 1];\n//       currentRound.winner = winner;\n//       let pot = [];\n\n//       currentRound.userBet = Wallet.chipSum(user.wallet.bet);\n//       this.table.forEach(x => {\n//           while (x.wallet.bet.length) {\n//               pot.push(x.wallet.bet.pop());\n//           }\n//       });\n\n//       const cash = Wallet.chipSum(pot);\n//       currentRound.pot = cash;\n\n//       while (pot.length) {\n//           currentRound.winner.wallet.chips.push(pot.pop());\n//       }\n\n//       currentRound.winner.wallet.sortWallet();\n//   }\n\n//   betting(bet) {\n//       this.table.forEach(x => {\n//           x.wallet.findBet(bet);\n\n//           this.allIn(x);\n//       });\n//   }\n\n//   allIn(player) {\n//       if (player.wallet.chips.length === 0) {\n//           player.allIn = true;\n//       }\n//       else {\n//           player.allIn = false;\n//       }\n\n//       return player.allIn;\n//   }\n\n//   nextRound() {\n//       this.round.push(new Round());\n//       this.deck = this.round[this.round.length - 1].deck;\n//       this.tableOrder.push(this.tableOrder.shift());\n\n//       this.table.forEach(x => {\n//           x.hand = new Hand();\n//       })\n\n//       if (this.tableOrder.length < 2 ) {\n//           console.log('The Game is over. Only one player remains!')\n//       }\n//       if (!this.tableOrder.find(x => x instanceof User)) {\n//           console.log(\"The Game is over. You're out of chips!\")\n//       }\n\n//       this.shuffle().deal();\n//       this.step = 0;\n//       this.tableOrder.forEach((x, i)=>{\n//           if (x.allIn) {\n//               this.tableOrder.splice(i, 1);\n//           }\n//       })\n//   }\n\n// }\n\n// class Shuffle {\n//   constructor(deck) {\n//       this.deck = deck;\n//   }\n\n//   //takes an array of cards and shuffles with various methods, returning a shuffled array\n//   shuffle() {\n//       this.wash()\n//           .cut()\n//           .riffle()\n//           .box()\n//           .cut()\n//           .riffle()\n\n//       return this;\n//   }\n\n//   wash() {\n//       let deck = this.deck;\n\n//       for (let i = 0; i < deck.length; i++) {\n//           let randomIndex = Math.floor(Math.random() * ((deck.length - 1) - i)) + i;\n//           let randCard = deck.splice(randomIndex, 1)[0];\n//           deck.unshift(randCard);\n//       }\n\n//       return this;\n//   }\n\n//   //Cuts deck, returns 'this'\n//   cut() {\n//       let deck = this.deck;\n//       const randSplit = (deck.length / 2) - 2 + Math.floor(Math.random()*5);\n\n//       for (let i = 0; i < randSplit; i++) {\n//           deck.push(deck.shift());\n//       }\n\n//       return this;\n//   }\n\n//   //Empties deck array into two halves with split(), they are poured back\n//   //into the deck with varying degrees of slop. Returns 'this'\n//   riffle() {\n//       const deck = this.deck;\n//       let [firstHalf, secondHalf] = this.split(deck);\n\n//       while (deck.length < 52) {\n//           this.riffler(firstHalf, deck);\n//           this.riffler(secondHalf, deck);\n//       }\n\n//       return this;\n//   }\n\n//   //deck divided out into two new arrays and returned in an array container\n//   split(deck) {\n//       let randSplit = 24 + Math.floor(Math.random()*5);\n//       let otherHalf = [];\n//       let clean = [];\n\n//       for (let i = 0; i < randSplit; i++) {\n//           otherHalf.push(deck.shift());\n//       }\n\n//       this.transfer(deck, clean);\n\n//       return [otherHalf, clean];\n//   }\n\n//   riffler(half, deck) {\n//       if (half.length) {\n//           deck.push(half.pop());\n//           const probability = Math.random();\n\n//           if (probability > 0.9 && half.length > 1) {\n//               deck.push(half.pop());\n//               deck.push(half.pop());\n//           }\n//           else if (probability > 0.75 && half.length) {\n//               deck.push(half.pop());\n//           }\n//       }\n//   }\n\n//   //Performs box shuffle. Returns 'this'\n//   box() {\n//       let deck = this.deck;\n//       let temp = [];\n\n//       while(deck.length) {\n//           const max = deck.length;\n//           let randLength = Math.floor(Math.random() * 7) + 10;\n\n//           (max > randLength) ? {}: randLength = max;\n\n//           let target = deck.length - randLength;\n\n//           for (let i = 0; i < randLength; i++) {\n//                temp.push(deck.splice(target, 1)[0]);\n//           }\n//       }\n\n//       this.transfer(temp, deck);\n\n//       return this;\n//   }\n\n//   //transfers array(/deck) a to array(/deck) b\n//   transfer(a, b) {\n//       while (a.length) {\n//           b.push(a.shift());\n//       }\n//   }\n\n// }\n\n// class Round {\n//   constructor() {\n//       this.deck = new Deck();\n//       this.community = [];\n//   }\n\n// }\n\n// class Card {\n//   constructor(value, suit) {\n//       this.value = value;\n//       this.suit = suit;\n//       this.display = this.cardDisplay();\n//       this.element = this.createCard();\n//   }\n\n//   cardDisplay() {\n//       let display = symbols[this.suit];\n//       let conditional = this.value;\n//       let value;\n\n//       if (conditional.length < 3) {\n//           value = conditional;\n//       }\n//       else {\n//           value = conditional[0];\n//       }\n\n//       display += value;\n\n//       return String(display);\n//   }\n\n//   // //Updated cardDisplay\n//   // cardDisplay() {\n//   //     let abbrv = symbols[this.suit];\n//   //     let temp = this.value;\n//   //     let value;\n\n//   //     abbrv += temp.length < 3 ? value = temp : value = temp[0]\n\n//   //     return String(abbrv);\n//   // }\n\n//   createCard() {\n//       const idString = `${this.suit}${this.value}`;\n//       const myCard = document.createElement('div');\n//       const text = document.createElement('span');\n//       this.id = idString;\n\n//       myCard.className = 'card';\n//       myCard.id = idString;\n//       text.innerText = this.display;\n//       myCard.appendChild(text);\n\n//       if ((this.suit[0]==='D') || (this.suit[0]==='H')) {\n//           myCard.style = 'color: red';\n//       }\n\n//       return myCard;\n//   }\n\n// }\n\n// class Wallet {\n//   constructor() {\n//       this.chips = this.buildWallet();\n//       this.bet = [];\n//   }\n\n//   buildWallet() {\n//       const wallet = [];\n//       const looper = (x, y) => {\n//           for (let i = 0; i < y; i++) {\n//               wallet.push(x);\n//           }\n//       }\n\n//       looper(new White(), 8);\n//       looper(new Red(), 6);\n//       looper(new Blue(), 5);\n//       looper(new Green(), 4);\n//       looper(new Black(), 2);\n\n//       return wallet;\n//   }\n\n//   findBet(target) {\n//       this.sortWallet();\n//       const wallet = this.chips;\n//       let bet = this.bet;\n\n//       if (!this.length()) return bet;\n\n//       bet = this.lowestPossible(target);\n\n//       if (this.remainder(target, bet) < 0 && this.length()) {\n//           const safety = wallet.findIndex(x => x.value > target);\n//           const difference = (wallet[safety].value - target) <= this.remainder(target, bet);\n\n//           if (difference) {\n//               bet.unshift(wallet.splice(safety, 1)[0]);\n\n//               while (bet.length > 1) {\n//                   wallet.push(bet.pop());\n//               }\n//           }\n//       }\n\n//       this.sortWallet();\n//       this.bet = bet;\n//   }\n\n//   remainder(target, bet) {\n//       return (target - Wallet.chipSum(bet));\n//   }\n\n//   length() {\n//       return this.chips.length;\n//   }\n\n//   lowestPossible(target) {\n//       const bet = [];\n\n//       for (let i = this.chips.length - 1; i > 0; i--) {\n//           if (this.chips[i].value <= this.remainder(target, bet)) {\n//               bet.push(this.chips.splice(i, 1)[0]);\n//           }\n//           if (this.remainder(target, bet) === 0) break;\n//       }\n\n//       return bet;\n//   }\n\n//   sortWallet() {\n//       this.chips.sort((a, b)=>a.value - b.value);\n\n//       return this;\n//   }\n\n//   static chipSum(chips) {\n//       let sum = 0;\n//       chips.forEach(x => {sum += x.value;});\n\n//       return sum;\n//   }\n// }\n\n// class Chip {\n//   constructor() {\n//       this.value;\n//   }\n\n// }\n// class White extends Chip {\n//   constructor() {\n//       super();\n//       this.value = 25;\n//   }\n// }\n// class Red extends Chip {\n//   constructor() {\n//       super();\n//       this.value = 50;\n//   }\n// }\n// class Blue extends Chip {\n//   constructor() {\n//       super();\n//       this.value = 100;\n//   }\n// }\n// class Green extends Chip {\n//   constructor() {\n//       super();\n//       this.value = 500;\n//   }\n// }\n// class Black extends Chip {\n//   constructor() {\n//       super();\n//       this.value = 1000;\n//   }\n// }\n\n// class Pot extends Wallet {\n//   constructor() {\n//       this.pot = [];\n//   }\n// }\n\n// class Quips {\n//   constructor(round) {\n//       this.round = round;\n//       this.msg = this.winOrLose();\n//   }\n\n//   winOrLose() {\n//       if (this.round.winnerIsUser) {\n//           return this.winningQuip();\n//       }\n//       else {\n//           return this.losingQuip();\n//       }\n//   }\n\n//   winningQuip() {\n//       let x = this.round;\n//       let msg = `Congratulations! You won a pot of $${x.pot} with your ${x.userHand}! Get ready for the next round!`;\n//       return msg;\n//   }\n\n//   losingQuip() {\n//       let x = this.round;\n//       let msg = `Ouch! Your ${x.userHand} was lower than ${x.winner.name}'s ${x.winningHand}! Fork over your $${x.userBet}!`;\n//       return msg;\n//   }\n\n//   static statusQuip() {\n//       return `Let's see who wins this round!`;\n//   }\n// }\n","import {\n  getPlayers,\n  dealPocket,\n  dealFlop,\n  dealTurnOrRiver,\n  evaluateGame,\n  nextRound,\n} from \"./backend\";\n\nexport function gameplayReducer(state, action) {\n  const buttonSetter = action.payload.buttonSetter;\n  const payload = { buttonSetter };\n  switch (action.type) {\n    case \"GET_PLAYERS\":\n      const [playerList, user] = getPlayers();\n      buttonSetter({ type: \"DEAL_POCKET\", payload });\n      return { players: playerList, user };\n    case \"DEAL_POCKET\":\n      const pocketState = dealPocket(state);\n      buttonSetter({ type: \"DEAL_FLOP\", payload });\n      return pocketState;\n    case \"DEAL_FLOP\":\n      const flopState = dealFlop(state);\n      buttonSetter({ type: \"DEAL_TURN\", payload });\n      return flopState;\n    case \"DEAL_TURN\":\n      const turnState = dealTurnOrRiver(state, \"turn\");\n      buttonSetter({ type: \"DEAL_RIVER\", payload });\n      return turnState;\n    case \"DEAL_RIVER\":\n      const riverState = dealTurnOrRiver(state, \"river\");\n      buttonSetter({ type: \"EVALUATE_GAME\", payload });\n      return riverState;\n    case \"EVALUATE_GAME\":\n      const evaluatedState = evaluateGame(state);\n      buttonSetter({ type: \"NEXT_ROUND\", payload });\n      return evaluatedState;\n    case \"NEXT_ROUND\":\n      const roundState = nextRound(state);\n      buttonSetter({ type: \"DEAL_POCKET\", payload });\n      return roundState;\n    default:\n      return state;\n  }\n}\n","export default function Image({imgUrl,userClass}) {\n  return (\n    <div \n      xs=\"auto\"\n      className={`avatar ${userClass}`} \n      style={{backgroundImage:`url(${imgUrl})`}}\n    />\n  );\n}","import { Col, Row } from \"react-bootstrap\";\nimport { CardComponent } from \"./Card\";\nimport Image from \"./Image\";\n\nexport default function Avatar(props) {\n  const { imgUrl, name, hand, isUser } = props;\n\n  const userClass = \"avatar-\" + (isUser ? \"user\" : \"opponent\");\n\n  const imageProp = { userClass, imgUrl };\n\n  return (\n    <>\n      <Col className=\"align-self-start\">\n        <Row>\n          <Image {...imageProp} />\n          <Col>\n            <Row xs={2}>\n              {hand.pocket &&\n                hand.pocket.map((x, i) => {\n                  return <CardComponent card={x} key={i} />;\n                })}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col xs=\"auto\" className=\"align-self-end\">\n        <h5>{name}</h5>\n      </Col>\n    </>\n  );\n}\n","import { Container, Row } from 'react-bootstrap';\nimport Avatar from './Avatar';\n\nexport default function PlayerPanel({players}) {\n  if (!players) return null;\n\n  const rowClass = \"align-items-center justify-content-between\";\n  \n  function Avatars() {\n    return (\n      players?.map((x,i)=>{\n        return (\n          <div key={i}>\n            <Row className={rowClass}>\n              <Avatar {...x}/>\n            </Row>\n          </div>\n        )\n      })\n    )\n  }\n\n  return (\n    <Container style={{padding: \"15px\"}} className=\"player-panel\">\n      <Avatars/>\n    </Container>\n  )\n}","export default function Quips(props) {\n  return (\n    <div>\n      <p>{phrase(props)}</p>\n      {console.log(process.env)}\n    </div>\n  );\n}\n\nfunction phrase(props) {\n  const { players, community, roundRank, records, user } = props;\n\n  var content = \"Click the button below to play Ferrel Poker!\";\n\n  if (players && !records) {\n    content = `${user}, click the button below to be dealt in.`;\n  }\n\n  if (players && community && !roundRank) {\n    const userObject = players.find((x) => x.name === user);\n    const [card1, card2] = userObject.hand.pocket;\n    content = `Hopefully ${card1.name} and ${card2.name} will be enough to win, ${user}...`;\n  }\n\n  if (roundRank) {\n    const winner = roundRank[0].name;\n    const winningHand = roundRank[0].hand;\n    content =\n      winner === user\n        ? `Congratulations ${user}! You won with ${winningHand}!`\n        : `Better luck next time... ${winner} won with ${winningHand}.`;\n  }\n\n  return content;\n}\n","import \"./Game.css\";\nimport { useReducer, useState } from \"react\";\nimport { gameplayReducer as reducer } from \"./reducers\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport PlayerPanel from \"./PlayerPanel\";\nimport { CardComponent } from \"./Card\";\nimport Quips from \"./Quips\";\n\nfunction Game() {\n  const [state, dispatch] = useReducer(reducer, {});\n  const [buttonState, setButtonState] = useState({ type: \"GET_PLAYERS\" });\n\n  const dispatchAction = {\n    ...buttonState,\n    payload: { buttonSetter: setButtonState },\n  };\n  return (\n    <Container className=\"Game\">\n      <Quips {...state} />\n      <Community {...state} />\n      <Container>\n        <Row>\n          <PlayerPanel {...state} />\n        </Row>\n        <Button onClick={() => dispatch(dispatchAction)}>\n          {dispatchAction.type.replace(\"_\", \" \")}\n        </Button>\n      </Container>\n    </Container>\n  );\n}\n\nfunction Community({ community }) {\n  if (!community) return null;\n\n  const { flop, turn, river } = community;\n  const cards = [flop, turn, river];\n  var renderableCards = [];\n  cards.forEach((x) => {\n    if (x) renderableCards = [...renderableCards, ...x];\n  });\n\n  return (\n    <Col className=\"align-items-center\">\n      <Row className=\"community\" xs={5}>\n        {renderableCards.map((x, i) => {\n          return <CardComponent card={x} key={i} />;\n        })}\n      </Row>\n    </Col>\n  );\n}\n\nexport default Game;\n","import './App.css';\nimport Game from './Game';\n\nfunction App() {\n  const heading = \"♠ - - Poker Time - - ♠\";\n  return (\n    <div className=\"App\">\n      <div \n        className=\"App-header\" \n        style={{\n          background: \"black\", \n          padding: \"10px\", \n          top: \"0px\", \n          position: \"sticky\"\n        }}\n      >\n        <h1 style={{color: \"white\"}}>{heading}</h1>\n      </div>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}